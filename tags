!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANY	include/x86/message.h	17;"	kind:macro
ASFLAGS	Makefile	/^ASFLAGS = -ggdb -m32 -MD$/;"	kind:macro
BLUE_SCREEN_TEXT	src/lib/abort.c	23;"	kind:macro	file:
CBUF_SZ	include/device/term.h	34;"	kind:macro
CBUF_SZ	include/device/tty.h	10;"	kind:macro
CC	Makefile	/^CC = gcc$/;"	kind:macro
CFILES	Makefile	/^CFILES = $(shell find src\/ -name "*.c")$/;"	kind:macro
CFLAGS	Makefile	/^CFLAGS = -m32 -march=i386 -static -MD -std=gnu89 -ggdb \\$/;"	kind:macro
C_BLACK	include/device/term.h	37;"	kind:macro
C_BLUE	include/device/term.h	38;"	kind:macro
C_LWHITE	include/device/term.h	40;"	kind:macro
C_WHITE	include/device/term.h	39;"	kind:macro
Console	include/device/tty.h	/^struct Console {$/;"	kind:struct
Console	include/device/tty.h	/^typedef struct Console Console;$/;"	kind:typedef	typeref:struct:Console
Console::cbuf	include/device/tty.h	/^	char cbuf[CBUF_SZ + 1];$/;"	kind:member	struct:Console	access:public
Console::f	include/device/tty.h	/^	int i, f, r;$/;"	kind:member	struct:Console	access:public
Console::h	include/device/tty.h	/^	int w, h, wh;$/;"	kind:member	struct:Console	access:public
Console::i	include/device/tty.h	/^	int i, f, r;$/;"	kind:member	struct:Console	access:public
Console::lbuf	include/device/tty.h	/^	char lbuf[LBUF_SZ + 1];$/;"	kind:member	struct:Console	access:public
Console::name	include/device/tty.h	/^	const char *name;$/;"	kind:member	struct:Console	access:public
Console::pos	include/device/tty.h	/^	int size, pos;$/;"	kind:member	struct:Console	access:public
Console::r	include/device/tty.h	/^	int i, f, r;$/;"	kind:member	struct:Console	access:public
Console::rstk	include/device/tty.h	/^	Message rstk[RSTK_SZ];$/;"	kind:member	struct:Console	access:public
Console::rtop	include/device/tty.h	/^	int rtop;$/;"	kind:member	struct:Console	access:public
Console::scr	include/device/tty.h	/^	uint16_t *scr;$/;"	kind:member	struct:Console	access:public
Console::size	include/device/tty.h	/^	int size, pos;$/;"	kind:member	struct:Console	access:public
Console::vbuf	include/device/tty.h	/^	uint16_t *vbuf;$/;"	kind:member	struct:Console	access:public
Console::w	include/device/tty.h	/^	int w, h, wh;$/;"	kind:member	struct:Console	access:public
Console::wh	include/device/tty.h	/^	int w, h, wh;$/;"	kind:member	struct:Console	access:public
DPL_KERNEL	include/x86/memory.h	4;"	kind:macro
DPL_USER	include/x86/memory.h	5;"	kind:macro
DevMessage	include/device/hal.h	/^struct DevMessage {$/;"	kind:struct
DevMessage	include/device/hal.h	/^typedef struct DevMessage DevMessage;$/;"	kind:typedef	typeref:struct:DevMessage
DevMessage::buf	include/device/hal.h	/^	void *buf;$/;"	kind:member	struct:DevMessage	access:public
DevMessage::count	include/device/hal.h	/^	size_t count;$/;"	kind:member	struct:DevMessage	access:public
DevMessage::dev_id	include/device/hal.h	/^	int dev_id;$/;"	kind:member	struct:DevMessage	access:public
DevMessage::header	include/device/hal.h	/^	MsgHead header; \/\/ header与Message的头部定义保持一致即可(src, dst, type)$/;"	kind:member	struct:DevMessage	access:public
DevMessage::offset	include/device/hal.h	/^	off_t offset;$/;"	kind:member	struct:DevMessage	access:public
Device	include/device/hal.h	/^struct Device {$/;"	kind:struct
Device	include/device/hal.h	/^typedef struct Device Device;$/;"	kind:typedef	typeref:struct:Device
Device::dev_id	include/device/hal.h	/^	int dev_id;$/;"	kind:member	struct:Device	access:public
Device::list	include/device/hal.h	/^	list_head list;$/;"	kind:member	struct:Device	access:public
Device::name	include/device/hal.h	/^	const char *name;$/;"	kind:member	struct:Device	access:public
Device::pid	include/device/hal.h	/^	pid_t pid;$/;"	kind:member	struct:Device	access:public
ELFHeader	boot/boot.h	/^struct ELFHeader {$/;"	kind:struct
ELFHeader::ehsize	boot/boot.h	/^	unsigned short ehsize;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::elf	boot/boot.h	/^	unsigned char  elf[12];$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::entry	boot/boot.h	/^	unsigned int   entry;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::flags	boot/boot.h	/^	unsigned int   flags;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::machine	boot/boot.h	/^	unsigned short machine;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::magic	boot/boot.h	/^	unsigned int   magic;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::phentsize	boot/boot.h	/^	unsigned short phentsize;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::phnum	boot/boot.h	/^	unsigned short phnum;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::phoff	boot/boot.h	/^	unsigned int   phoff;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::shentsize	boot/boot.h	/^	unsigned short shentsize;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::shnum	boot/boot.h	/^	unsigned short shnum;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::shoff	boot/boot.h	/^	unsigned int   shoff;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::shstrndx	boot/boot.h	/^	unsigned short shstrndx;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::type	boot/boot.h	/^	unsigned short type;$/;"	kind:member	struct:ELFHeader	access:public
ELFHeader::version	boot/boot.h	/^	unsigned int   version;$/;"	kind:member	struct:ELFHeader	access:public
FALSE	include/common/const.h	5;"	kind:macro
FREQ_8253	include/device/timer.h	7;"	kind:macro
GDT_ENTRY	boot/asm.h	2;"	kind:macro
GITFLAGS	Makefile	/^GITFLAGS = -q --author='tracer <tracer@njuoslab.org>' --no-verify --allow-empty$/;"	kind:macro
GateDescriptor	include/x86/memory.h	/^struct GateDescriptor {$/;"	kind:struct
GateDescriptor::offset_15_0	include/x86/memory.h	/^	uint32_t offset_15_0      : 16;$/;"	kind:member	struct:GateDescriptor	access:public
GateDescriptor::offset_31_16	include/x86/memory.h	/^	uint32_t offset_31_16     : 16;$/;"	kind:member	struct:GateDescriptor	access:public
GateDescriptor::pad0	include/x86/memory.h	/^	uint32_t pad0             : 8;$/;"	kind:member	struct:GateDescriptor	access:public
GateDescriptor::present	include/x86/memory.h	/^	uint32_t present          : 1;$/;"	kind:member	struct:GateDescriptor	access:public
GateDescriptor::privilege_level	include/x86/memory.h	/^	uint32_t privilege_level  : 2;$/;"	kind:member	struct:GateDescriptor	access:public
GateDescriptor::segment	include/x86/memory.h	/^	uint32_t segment          : 16;$/;"	kind:member	struct:GateDescriptor	access:public
GateDescriptor::system	include/x86/memory.h	/^	uint32_t system           : 1;$/;"	kind:member	struct:GateDescriptor	access:public
GateDescriptor::type	include/x86/memory.h	/^	uint32_t type             : 4;$/;"	kind:member	struct:GateDescriptor	access:public
HZ	include/device/timer.h	9;"	kind:macro
INIT_LIST_HEAD	include/common/list.h	30;"	kind:macro
INTERRUPT_GATE_32	src/irq/idt.c	3;"	kind:macro	file:
IRQ_SLAVE	src/irq/i8259.c	5;"	kind:macro	file:
K_ALT	include/device/term.h	8;"	kind:macro
K_BACK	include/device/term.h	11;"	kind:macro
K_CAPS	include/device/term.h	4;"	kind:macro
K_CTRL	include/device/term.h	7;"	kind:macro
K_DEL	include/device/term.h	21;"	kind:macro
K_END	include/device/term.h	19;"	kind:macro
K_ENTR	include/device/term.h	10;"	kind:macro
K_F1	include/device/term.h	23;"	kind:macro
K_F2	include/device/term.h	24;"	kind:macro
K_F3	include/device/term.h	25;"	kind:macro
K_F4	include/device/term.h	26;"	kind:macro
K_F5	include/device/term.h	27;"	kind:macro
K_F6	include/device/term.h	28;"	kind:macro
K_HOME	include/device/term.h	18;"	kind:macro
K_INS	include/device/term.h	20;"	kind:macro
K_LEFT	include/device/term.h	13;"	kind:macro
K_LSHFT	include/device/term.h	5;"	kind:macro
K_PDWN	include/device/term.h	17;"	kind:macro
K_PUP	include/device/term.h	16;"	kind:macro
K_RIGHT	include/device/term.h	14;"	kind:macro
K_RSHFT	include/device/term.h	6;"	kind:macro
LBUF_SZ	include/device/term.h	33;"	kind:macro
LBUF_SZ	include/device/tty.h	9;"	kind:macro
LD	Makefile	/^LD = ld$/;"	kind:macro
LDFLAGS	Makefile	/^LDFLAGS = -melf_i386$/;"	kind:macro
LIST_HEAD	include/common/list.h	27;"	kind:macro
LIST_HEAD_INIT	include/common/list.h	25;"	kind:macro
MSG_DEVRD	include/device/hal.h	7;"	kind:macro
MSG_DEVWR	include/device/hal.h	8;"	kind:macro
MSG_HWINTR	include/x86/message.h	18;"	kind:macro
MSG_TTY_GETKEY	include/device/tty.h	7;"	kind:macro
MSG_TTY_UPDATE	include/device/tty.h	8;"	kind:macro
M_ALT	include/device/term.h	31;"	kind:macro
M_CTRL	include/device/term.h	30;"	kind:macro
Message	include/x86/message.h	/^struct Message {$/;"	kind:struct
Message	include/x86/message.h	/^typedef struct Message Message;$/;"	kind:typedef	typeref:struct:Message
Message::src	include/x86/message.h	/^	int src;$/;"	kind:member	struct:Message	access:public
Message::type	include/x86/message.h	/^	int type;$/;"	kind:member	struct:Message	access:public
MsgHead	include/x86/message.h	/^struct MsgHead {$/;"	kind:struct
MsgHead	include/x86/message.h	/^typedef struct MsgHead MsgHead;$/;"	kind:typedef	typeref:struct:MsgHead
MsgHead::src	include/x86/message.h	/^	int src;$/;"	kind:member	struct:MsgHead	access:public
MsgHead::type	include/x86/message.h	/^	int type;$/;"	kind:member	struct:MsgHead	access:public
NR_DEV	src/device/hal.c	6;"	kind:macro	file:
NR_IRQ	include/x86/cpu.h	34;"	kind:macro
NR_SEGMENTS	include/x86/memory.h	7;"	kind:macro
NR_TTY	include/device/tty.h	6;"	kind:macro
NULL	include/common/const.h	7;"	kind:macro
OBJS	Makefile	/^OBJS = $(CFILES:.c=.o) $(SFILES:.S=.o)$/;"	kind:macro
P	include/x86/sem.h	/^extern void P(Semaphore *sem);$/;"	kind:prototype	signature:(Semaphore *sem)
P	src/proc/sem.c	/^P(Semaphore *sem) {$/;"	kind:function	signature:(Semaphore *sem)
PORT_PIC_MASTER	src/irq/i8259.c	3;"	kind:macro	file:
PORT_PIC_SLAVE	src/irq/i8259.c	4;"	kind:macro	file:
PORT_RTC	include/device/timer.h	5;"	kind:macro
PORT_TIME	include/device/timer.h	4;"	kind:macro
ProgramHeader	boot/boot.h	/^struct ProgramHeader {$/;"	kind:struct
ProgramHeader::align	boot/boot.h	/^	unsigned int align;$/;"	kind:member	struct:ProgramHeader	access:public
ProgramHeader::filesz	boot/boot.h	/^	unsigned int filesz;$/;"	kind:member	struct:ProgramHeader	access:public
ProgramHeader::flags	boot/boot.h	/^	unsigned int flags;$/;"	kind:member	struct:ProgramHeader	access:public
ProgramHeader::memsz	boot/boot.h	/^	unsigned int memsz;$/;"	kind:member	struct:ProgramHeader	access:public
ProgramHeader::off	boot/boot.h	/^	unsigned int off;$/;"	kind:member	struct:ProgramHeader	access:public
ProgramHeader::paddr	boot/boot.h	/^	unsigned int paddr;$/;"	kind:member	struct:ProgramHeader	access:public
ProgramHeader::type	boot/boot.h	/^	unsigned int type;$/;"	kind:member	struct:ProgramHeader	access:public
ProgramHeader::vaddr	boot/boot.h	/^	unsigned int vaddr;$/;"	kind:member	struct:ProgramHeader	access:public
QEMU	Makefile	/^QEMU = qemu-system-i386$/;"	kind:macro
RSTK_SZ	include/device/tty.h	11;"	kind:macro
SCR_H	include/device/term.h	43;"	kind:macro
SCR_W	include/device/term.h	42;"	kind:macro
SECTSIZE	boot/main.c	11;"	kind:macro	file:
SEG_ASM	boot/asm.h	9;"	kind:macro
SEG_KERNEL_CODE	include/x86/memory.h	8;"	kind:macro
SEG_KERNEL_DATA	include/x86/memory.h	9;"	kind:macro
SEG_NULLASM	boot/asm.h	5;"	kind:macro
SERIAL_PORT	include/device/serial.h	7;"	kind:macro
SFILES	Makefile	/^SFILES = $(shell find src\/ -name "*.S")$/;"	kind:macro
STK_SZ	include/x86/thread.h	8;"	kind:macro
Semaphore	include/x86/sem.h	/^struct Semaphore {$/;"	kind:struct
Semaphore	include/x86/sem.h	/^typedef struct Semaphore Semaphore;$/;"	kind:typedef	typeref:struct:Semaphore
Semaphore::count	include/x86/sem.h	/^	int count;$/;"	kind:member	struct:Semaphore	access:public
Semaphore::queue	include/x86/sem.h	/^	struct list_head queue;$/;"	kind:member	struct:Semaphore	typeref:struct:Semaphore::list_head	access:public
THREAD_NUM	include/x86/thread.h	9;"	kind:macro
TIME	src/device/timer.c	/^pid_t TIME;$/;"	kind:variable
TRAP_GATE_32	src/irq/idt.c	4;"	kind:macro	file:
TRUE	include/common/const.h	4;"	kind:macro
TTY	include/device/tty.h	/^extern pid_t TTY;$/;"	kind:externvar
TTY	src/tty/tty.c	/^pid_t TTY;$/;"	kind:variable
Thread	include/x86/thread.h	/^struct Thread {$/;"	kind:struct
Thread	include/x86/thread.h	/^typedef struct Thread Thread;$/;"	kind:typedef	typeref:struct:Thread
Thread::freeq	include/x86/thread.h	/^	struct list_head runq, freeq, semq;$/;"	kind:member	struct:Thread	typeref:struct:Thread::	access:public
Thread::is_sleeping	include/x86/thread.h	/^	int is_sleeping;$/;"	kind:member	struct:Thread	access:public
Thread::kstack	include/x86/thread.h	/^	char kstack[STK_SZ];$/;"	kind:member	struct:Thread	access:public
Thread::lock_counter	include/x86/thread.h	/^	int lock_counter;$/;"	kind:member	struct:Thread	access:public
Thread::pid	include/x86/thread.h	/^	pid_t pid;$/;"	kind:member	struct:Thread	access:public
Thread::runq	include/x86/thread.h	/^	struct list_head runq, freeq, semq;$/;"	kind:member	struct:Thread	typeref:struct:Thread::list_head	access:public
Thread::semq	include/x86/thread.h	/^	struct list_head runq, freeq, semq;$/;"	kind:member	struct:Thread	typeref:struct:Thread::	access:public
Thread::tf	include/x86/thread.h	/^	struct TrapFrame* tf;$/;"	kind:member	struct:Thread	typeref:struct:Thread::TrapFrame	access:public
Time	include/device/timer.h	/^struct Time {$/;"	kind:struct
Time	include/device/timer.h	/^typedef struct Time Time;$/;"	kind:typedef	typeref:struct:Time
Time::day	include/device/timer.h	/^	int year, month, day;$/;"	kind:member	struct:Time	access:public
Time::hour	include/device/timer.h	/^	int hour, minute, second;$/;"	kind:member	struct:Time	access:public
Time::minute	include/device/timer.h	/^	int hour, minute, second;$/;"	kind:member	struct:Time	access:public
Time::month	include/device/timer.h	/^	int year, month, day;$/;"	kind:member	struct:Time	access:public
Time::second	include/device/timer.h	/^	int hour, minute, second;$/;"	kind:member	struct:Time	access:public
Time::year	include/device/timer.h	/^	int year, month, day;$/;"	kind:member	struct:Time	access:public
TrapFrame	include/x86/memory.h	/^struct TrapFrame {$/;"	kind:struct
TrapFrame::cs	include/x86/memory.h	/^	uint32_t eip, cs, eflags;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::eax	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::ebp	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::ebx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::ecx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::edi	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::edx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::eflags	include/x86/memory.h	/^	uint32_t eip, cs, eflags;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::eip	include/x86/memory.h	/^	uint32_t eip, cs, eflags;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::esi	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::irq	include/x86/memory.h	/^	int32_t irq;$/;"	kind:member	struct:TrapFrame	access:public
TrapFrame::xxx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
V	include/x86/sem.h	/^extern void V(Semaphore *sem);$/;"	kind:prototype	signature:(Semaphore *sem)
V	src/proc/sem.c	/^V(Semaphore *sem) {$/;"	kind:function	signature:(Semaphore *sem)
__ASSERT_H__	include/common/assert.h	2;"	kind:macro
__COMMON_H__	include/common.h	2;"	kind:macro
__CONST_H__	include/common/const.h	2;"	kind:macro
__DEVICE_H__	include/device.h	2;"	kind:macro
__IRQ_H__	include/x86/irq.h	2;"	kind:macro
__LIST_H__	include/common/list.h	2;"	kind:macro
__MOD_HAL_H__	include/device/hal.h	2;"	kind:macro
__SEM_H__	include/x86/sem.h	2;"	kind:macro
__SERIAL_H__	include/device/serial.h	2;"	kind:macro
__STRING_H__	include/common/string.h	2;"	kind:macro
__TERM_H__	include/device/term.h	2;"	kind:macro
__THREAD_H__	include/x86/thread.h	2;"	kind:macro
__TIMER_H__	include/device/timer.h	2;"	kind:macro
__TTY_H__	include/device/tty.h	2;"	kind:macro
__TYPES_H__	include/common/types.h	2;"	kind:macro
__X86_CPU_H__	include/x86/cpu.h	2;"	kind:macro
__X86_H__	include/x86.h	2;"	kind:macro
__X86_IO_H__	include/x86/io.h	2;"	kind:macro
__X86_MEMORY_H__	include/x86/memory.h	2;"	kind:macro
__X86_MESSAGE_H__	include/x86/message.h	2;"	kind:macro
__list_add	include/common/list.h	/^static inline void __list_add(struct list_head *new,$/;"	kind:function	signature:(struct list_head *new, struct list_head *prev, struct list_head *next)
__list_del	include/common/list.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	kind:function	signature:(struct list_head *prev, struct list_head *next)
__list_splice	include/common/list.h	/^static inline void __list_splice(struct list_head *list,$/;"	kind:function	signature:(struct list_head *list, struct list_head *head)
abort	include/common/assert.h	/^int abort(const char *, int);$/;"	kind:prototype	signature:(const char *, int)
abort	src/lib/abort.c	/^abort(const char *fname, int line) {$/;"	kind:function	signature:(const char *fname, int line)
add_irq_handle	include/x86/irq.h	/^void add_irq_handle(int, void(*)(void));$/;"	kind:prototype	signature:(int, void(*)(void))
add_irq_handle	src/irq/idt.c	/^add_irq_handle(int irq_num, void (*handler)(void)) {$/;"	kind:function	signature:(int irq_num, void (*handler)(void))
align	boot/boot.h	/^	unsigned int align;$/;"	kind:member	struct:ProgramHeader	access:public
alt	src/tty/keyboard.c	/^static int caps, ctrl, alt, shft;$/;"	kind:variable	file:
ani	src/tty/banner.c	/^static char ani[] = "-\\\\|\/";$/;"	kind:variable	file:
append	src/lib/abort.c	/^append(char **p, const char *str) {$/;"	kind:function	file:	signature:(char **p, const char *str)
asm_do_irq	src/irq/do_irq.S	/^asm_do_irq:$/;"	kind:label
assert	include/common/assert.h	8;"	kind:macro
backsp	src/tty/console.c	/^backsp(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
banner	src/tty/banner.c	/^extern char banner[SCR_W + 1];$/;"	kind:externvar
banner	src/tty/console.c	/^char banner[SCR_W + 1];$/;"	kind:variable
bool	include/common/types.h	/^typedef          int   bool;$/;"	kind:typedef
bootmain	boot/main.c	/^bootmain(void) {$/;"	kind:function	signature:(void)
buf	include/device/hal.h	/^	void *buf;$/;"	kind:member	struct:DevMessage	access:public
caps	src/tty/keyboard.c	/^static int caps, ctrl, alt, shft;$/;"	kind:variable	file:
cbuf	include/device/tty.h	/^	char cbuf[CBUF_SZ + 1];$/;"	kind:member	struct:Console	access:public
consl_accept	include/device/tty.h	/^void consl_accept(Console *c, char ch);$/;"	kind:prototype	signature:(Console *c, char ch)
consl_accept	src/tty/console.c	/^consl_accept(Console *c, char ch) {$/;"	kind:function	signature:(Console *c, char ch)
consl_feed	include/device/tty.h	/^void consl_feed(Console *c, int key);$/;"	kind:prototype	signature:(Console *c, int key)
consl_feed	src/tty/console.c	/^consl_feed(Console *c, int key) {$/;"	kind:function	signature:(Console *c, int key)
consl_sync	include/device/tty.h	/^void consl_sync(Console *c);$/;"	kind:prototype	signature:(Console *c)
consl_sync	src/tty/console.c	/^consl_sync(Console *c) {$/;"	kind:function	signature:(Console *c)
consl_writec	include/device/tty.h	/^void consl_writec(Console *c, char ch);$/;"	kind:prototype	signature:(Console *c, char ch)
consl_writec	src/tty/console.c	/^consl_writec(Console *c, char ch) {$/;"	kind:function	signature:(Console *c, char ch)
cook	src/tty/console.c	/^cook(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
count	include/device/hal.h	/^	size_t count;$/;"	kind:member	struct:DevMessage	access:public
count	include/x86/sem.h	/^	int count;$/;"	kind:member	struct:Semaphore	access:public
cr	src/tty/console.c	/^cr(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
create_kthread	include/x86/thread.h	/^Thread* create_kthread(void (*entry)(void));$/;"	kind:prototype	signature:(void (*entry)(void))
create_kthread	src/proc/thread.c	/^create_kthread(void (*entry)(void)) {$/;"	kind:function	signature:(void (*entry)(void))
cs	include/x86/memory.h	/^	uint32_t eip, cs, eflags;$/;"	kind:member	struct:TrapFrame	access:public
ctrl	src/tty/keyboard.c	/^static int caps, ctrl, alt, shft;$/;"	kind:variable	file:
current	include/x86/thread.h	/^extern Thread *current, *free, *sleeping, *next;$/;"	kind:externvar
current	src/proc/thread.c	/^Thread *current, *free, *sleeping, *next;$/;"	kind:variable
current_consl	include/device/tty.h	/^extern Console *current_consl;$/;"	kind:externvar
current_consl	src/tty/console.c	/^Console *current_consl;$/;"	kind:variable
day	include/device/timer.h	/^	int year, month, day;$/;"	kind:member	struct:Time	access:public
del	src/tty/console.c	/^del(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
dev_id	include/device/hal.h	/^	int dev_id;$/;"	kind:member	struct:DevMessage	access:public
dev_id	include/device/hal.h	/^	int dev_id;$/;"	kind:member	struct:Device	access:public
dev_pool	src/device/hal.c	/^static Device dev_pool[NR_DEV];$/;"	kind:variable	file:
dev_read	include/device/hal.h	/^size_t dev_read(Device *dev, off_t offset, void *buf, size_t count);$/;"	kind:prototype	signature:(Device *dev, off_t offset, void *buf, size_t count)
dev_read	src/device/hal.c	/^dev_read(Device *dev, off_t offset, void *buf, size_t count) {$/;"	kind:function	signature:(Device *dev, off_t offset, void *buf, size_t count)
dev_rw	src/device/hal.c	/^dev_rw(int type, Device *dev, off_t offset, void *buf, size_t count) {$/;"	kind:function	file:	signature:(int type, Device *dev, off_t offset, void *buf, size_t count)
dev_write	include/device/hal.h	/^size_t dev_write(Device *dev, off_t offset, void *buf, size_t count);$/;"	kind:prototype	signature:(Device *dev, off_t offset, void *buf, size_t count)
dev_write	src/device/hal.c	/^dev_write(Device *dev, off_t offset, void *buf, size_t count) {$/;"	kind:function	signature:(Device *dev, off_t offset, void *buf, size_t count)
devices	src/device/hal.c	/^static list_head freeq, devices;$/;"	kind:variable	file:
disable_interrupt	include/x86/cpu.h	/^disable_interrupt(void) {$/;"	kind:function	signature:(void)
display_message	src/lib/abort.c	/^display_message(const char *file, int line) {$/;"	kind:function	file:	signature:(const char *file, int line)
draw	src/tty/console.c	/^draw(char ch) {$/;"	kind:function	file:	signature:(char ch)
draw2	src/tty/banner.c	/^draw2(char **p, int q) {$/;"	kind:function	file:	signature:(char **p, int q)
eax	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
ebp	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
ebx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
echo	src/main.c	/^echo() {$/;"	kind:function
ecx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
edi	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
edx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
eflags	include/x86/memory.h	/^	uint32_t eip, cs, eflags;$/;"	kind:member	struct:TrapFrame	access:public
ehsize	boot/boot.h	/^	unsigned short ehsize;$/;"	kind:member	struct:ELFHeader	access:public
eip	include/x86/memory.h	/^	uint32_t eip, cs, eflags;$/;"	kind:member	struct:TrapFrame	access:public
elf	boot/boot.h	/^	unsigned char  elf[12];$/;"	kind:member	struct:ELFHeader	access:public
enable_interrupt	include/x86/cpu.h	/^enable_interrupt(void) {$/;"	kind:function	signature:(void)
entry	boot/boot.h	/^	unsigned int   entry;$/;"	kind:member	struct:ELFHeader	access:public
entry	src/main.c	/^entry(void) {$/;"	kind:function	signature:(void)
esi	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
f	include/device/tty.h	/^	int i, f, r;$/;"	kind:member	struct:Console	access:public
filesz	boot/boot.h	/^	unsigned int filesz;$/;"	kind:member	struct:ProgramHeader	access:public
flags	boot/boot.h	/^	unsigned int   flags;$/;"	kind:member	struct:ELFHeader	access:public
flags	boot/boot.h	/^	unsigned int flags;$/;"	kind:member	struct:ProgramHeader	access:public
free	include/x86/thread.h	/^extern Thread *current, *free, *sleeping, *next;$/;"	kind:externvar
free	src/proc/thread.c	/^Thread *current, *free, *sleeping, *next;$/;"	kind:variable
freeq	include/x86/thread.h	/^	struct list_head runq, freeq, semq;$/;"	kind:member	struct:Thread	typeref:struct:Thread::	access:public
freeq	src/device/hal.c	/^static list_head freeq, devices;$/;"	kind:variable	file:
gdt	boot/start.S	/^gdt:$/;"	kind:label
gdtdesc	boot/start.S	/^gdtdesc:                           # GDT描述符$/;"	kind:label
get_cooked	src/tty/console.c	/^get_cooked(Console *c, char *buf, int count) {$/;"	kind:function	signature:(Console *c, char *buf, int count)
get_time	include/device/timer.h	/^void get_time(Time *tm);$/;"	kind:prototype	signature:(Time *tm)
get_time	src/device/timer.c	/^get_time(Time *tm) {$/;"	kind:function	signature:(Time *tm)
grading	src/main.c	/^grading (void) {$/;"	kind:function	signature:(void)
grading	src/main.c	/^void grading (void);$/;"	kind:prototype	file:	signature:(void)
h	include/device/tty.h	/^	int w, h, wh;$/;"	kind:member	struct:Console	access:public
hal_get	include/device/hal.h	/^Device *hal_get(const char *name);$/;"	kind:prototype	signature:(const char *name)
hal_get	src/device/hal.c	/^hal_get(const char *name) {$/;"	kind:function	signature:(const char *name)
hal_list	include/device/hal.h	/^void hal_list(void);$/;"	kind:prototype	signature:(void)
hal_list	src/device/hal.c	/^hal_list(void) {$/;"	kind:function	signature:(void)
hal_register	include/device/hal.h	/^void hal_register(const char *name, pid_t pid, int dev_id);$/;"	kind:prototype	signature:(const char *name, pid_t pid, int dev_id)
hal_register	src/device/hal.c	/^hal_register(const char *name, pid_t pid, int dev_id) {$/;"	kind:function	signature:(const char *name, pid_t pid, int dev_id)
header	include/device/hal.h	/^	MsgHead header; \/\/ header与Message的头部定义保持一致即可(src, dst, type)$/;"	kind:member	struct:DevMessage	access:public
hour	include/device/timer.h	/^	int hour, minute, second;$/;"	kind:member	struct:Time	access:public
i	include/device/tty.h	/^	int i, f, r;$/;"	kind:member	struct:Console	access:public
idt	src/irq/idt.c	/^struct GateDescriptor idt[NR_IRQ];$/;"	kind:variable	typeref:struct:GateDescriptor
in_byte	boot/boot.h	/^in_byte(short port) {$/;"	kind:function	signature:(short port)
in_byte	include/x86/io.h	/^in_byte(uint16_t port) {$/;"	kind:function	signature:(uint16_t port)
in_long	boot/boot.h	/^in_long(short port) {$/;"	kind:function	signature:(short port)
init_consl	src/tty/console.c	/^init_consl(Console *c, uint16_t *vbuf) {$/;"	kind:function	file:	signature:(Console *c, uint16_t *vbuf)
init_console	src/tty/console.c	/^init_console(void) {$/;"	kind:function	signature:(void)
init_console	src/tty/tty.c	/^void init_console();$/;"	kind:prototype	file:
init_hal	include/device/hal.h	/^void init_hal(void);$/;"	kind:prototype	signature:(void)
init_hal	src/device/hal.c	/^init_hal(void) {$/;"	kind:function	signature:(void)
init_i8253	include/device/timer.h	/^void init_i8253(void);$/;"	kind:prototype	signature:(void)
init_i8253	src/device/timer.c	/^init_i8253(void) {$/;"	kind:function	signature:(void)
init_idt	include/x86/irq.h	/^void init_idt(void);$/;"	kind:prototype	signature:(void)
init_idt	src/irq/idt.c	/^void init_idt() {$/;"	kind:function
init_intr	include/x86/irq.h	/^void init_intr(void);$/;"	kind:prototype	signature:(void)
init_intr	src/irq/i8259.c	/^init_intr(void) {$/;"	kind:function	signature:(void)
init_sem	include/x86/sem.h	/^extern void init_sem(Semaphore *sem, int value);$/;"	kind:prototype	signature:(Semaphore *sem, int value)
init_sem	src/proc/sem.c	/^init_sem(Semaphore *sem, int value) {$/;"	kind:function	signature:(Semaphore *sem, int value)
init_serial	include/device/serial.h	/^void init_serial(void);$/;"	kind:prototype	signature:(void)
init_serial	src/device/serial.c	/^init_serial(void) {$/;"	kind:function	signature:(void)
init_thread	include/x86/thread.h	/^void init_thread(void);$/;"	kind:prototype	signature:(void)
init_thread	src/proc/thread.c	/^init_thread(void) {$/;"	kind:function	signature:(void)
init_timer	include/device/timer.h	/^void init_timer(void);$/;"	kind:prototype	signature:(void)
init_timer	src/device/timer.c	/^init_timer(void) {$/;"	kind:function	signature:(void)
init_tty	include/device/tty.h	/^void init_tty(void);$/;"	kind:prototype	signature:(void)
init_tty	src/tty/tty.c	/^void init_tty(void) {$/;"	kind:function	signature:(void)
int16_t	include/common/types.h	/^typedef          short int16_t;$/;"	kind:typedef
int32_t	include/common/types.h	/^typedef          int   int32_t;$/;"	kind:typedef
int8_t	include/common/types.h	/^typedef          char  int8_t;$/;"	kind:typedef
irq	include/x86/memory.h	/^	int32_t irq;$/;"	kind:member	struct:TrapFrame	access:public
irq0	src/irq/idt.c	/^void irq0();$/;"	kind:prototype	file:
irq1	src/irq/idt.c	/^void irq1();$/;"	kind:prototype	file:
irq_empty	src/irq/idt.c	/^void irq_empty();$/;"	kind:prototype	file:
irq_handle	src/irq/irq_handle.c	/^irq_handle(struct TrapFrame *tf) {$/;"	kind:function	signature:(struct TrapFrame *tf)
is_sleeping	include/x86/thread.h	/^	int is_sleeping;$/;"	kind:member	struct:Thread	access:public
itoa	src/lib/abort.c	/^itoa(int a) {$/;"	kind:function	file:	signature:(int a)
jiffy	include/device/timer.h	/^extern long jiffy;$/;"	kind:externvar
jiffy	src/device/timer.c	/^long jiffy = 0;$/;"	kind:variable
keychar	include/device/term.h	/^extern int keychar[2][128];$/;"	kind:externvar
keychar	src/tty/keyboard.c	/^int keychar[2][128] = {$/;"	kind:variable
kstack	include/x86/thread.h	/^	char kstack[STK_SZ];$/;"	kind:member	struct:Thread	access:public
lbuf	include/device/tty.h	/^	char lbuf[LBUF_SZ + 1];$/;"	kind:member	struct:Console	access:public
lf	src/tty/console.c	/^lf(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
list	include/device/hal.h	/^	list_head list;$/;"	kind:member	struct:Device	access:public
list_add	include/common/list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	kind:function	signature:(struct list_head *new, struct list_head *head)
list_add_tail	include/common/list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	kind:function	signature:(struct list_head *new, struct list_head *head)
list_del	include/common/list.h	/^static inline void list_del(struct list_head *entry)$/;"	kind:function	signature:(struct list_head *entry)
list_del_init	include/common/list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	kind:function	signature:(struct list_head *entry)
list_empty	include/common/list.h	/^static inline int list_empty(struct list_head *head)$/;"	kind:function	signature:(struct list_head *head)
list_entry	include/common/list.h	190;"	kind:macro
list_for_each	include/common/list.h	198;"	kind:macro
list_for_each_entry	include/common/list.h	226;"	kind:macro
list_for_each_entry_safe	include/common/list.h	238;"	kind:macro
list_for_each_prev	include/common/list.h	206;"	kind:macro
list_for_each_safe	include/common/list.h	216;"	kind:macro
list_head	include/common/list.h	/^struct list_head {$/;"	kind:struct
list_head	include/common/list.h	/^typedef struct list_head list_head;$/;"	kind:typedef	typeref:struct:list_head
list_head::next	include/common/list.h	/^	struct list_head *next, *prev;$/;"	kind:member	struct:list_head	typeref:struct:list_head::list_head	access:public
list_head::prev	include/common/list.h	/^	struct list_head *next, *prev;$/;"	kind:member	struct:list_head	typeref:struct:list_head::	access:public
list_move	include/common/list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	kind:function	signature:(struct list_head *list, struct list_head *head)
list_move_tail	include/common/list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	kind:function	signature:(struct list_head *list, struct list_head *head)
list_splice	include/common/list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	kind:function	signature:(struct list_head *list, struct list_head *head)
list_splice_init	include/common/list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	kind:function	signature:(struct list_head *list, struct list_head *head)
lock	include/x86/thread.h	/^lock(void) {$/;"	kind:function	signature:(void)
lock_counter	include/x86/thread.h	/^	int lock_counter;$/;"	kind:member	struct:Thread	access:public
lock_counter	src/proc/thread.c	/^volatile int lock_counter;$/;"	kind:variable
machine	boot/boot.h	/^	unsigned short machine;$/;"	kind:member	struct:ELFHeader	access:public
magic	boot/boot.h	/^	unsigned int   magic;$/;"	kind:member	struct:ELFHeader	access:public
md	src/device/timer.c	/^md(int year, int month) {$/;"	kind:function	file:	signature:(int year, int month)
memcpy	include/common/string.h	/^void *memcpy(void *, const void *, size_t);$/;"	kind:prototype	signature:(void *, const void *, size_t)
memcpy	src/lib/string.c	/^memcpy(void *dst, const void *src, size_t count) {$/;"	kind:function	signature:(void *dst, const void *src, size_t count)
memset	include/common/string.h	/^void *memset(void *, int, size_t);$/;"	kind:prototype	signature:(void *, int, size_t)
memset	src/lib/string.c	/^memset(void *dst, int val, size_t count) {$/;"	kind:function	signature:(void *dst, int val, size_t count)
memsz	boot/boot.h	/^	unsigned int memsz;$/;"	kind:member	struct:ProgramHeader	access:public
minute	include/device/timer.h	/^	int hour, minute, second;$/;"	kind:member	struct:Time	access:public
month	include/device/timer.h	/^	int year, month, day;$/;"	kind:member	struct:Time	access:public
movl	src/tty/console.c	/^movl(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
movr	src/tty/console.c	/^movr(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
name	include/device/hal.h	/^	const char *name;$/;"	kind:member	struct:Device	access:public
name	include/device/tty.h	/^	const char *name;$/;"	kind:member	struct:Console	access:public
next	include/common/list.h	/^	struct list_head *next, *prev;$/;"	kind:member	struct:list_head	typeref:struct:list_head::list_head	access:public
next	include/x86/thread.h	/^extern Thread *current, *free, *sleeping, *next;$/;"	kind:externvar
next	src/proc/thread.c	/^Thread *current, *free, *sleeping, *next;$/;"	kind:variable
next	src/tty/console.c	/^next(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
off	boot/boot.h	/^	unsigned int off;$/;"	kind:member	struct:ProgramHeader	access:public
off_t	include/common/types.h	/^typedef          int   off_t;$/;"	kind:typedef
offset	include/device/hal.h	/^	off_t offset;$/;"	kind:member	struct:DevMessage	access:public
offset_15_0	include/x86/memory.h	/^	uint32_t offset_15_0      : 16;$/;"	kind:member	struct:GateDescriptor	access:public
offset_31_16	include/x86/memory.h	/^	uint32_t offset_31_16     : 16;$/;"	kind:member	struct:GateDescriptor	access:public
out_byte	boot/boot.h	/^out_byte(short port, char data) {$/;"	kind:function	signature:(short port, char data)
out_byte	include/x86/io.h	/^out_byte(uint16_t port, int8_t data) {$/;"	kind:function	signature:(uint16_t port, int8_t data)
pad0	include/x86/memory.h	/^	uint32_t pad0             : 8;$/;"	kind:member	struct:GateDescriptor	access:public
paddr	boot/boot.h	/^	unsigned int paddr;$/;"	kind:member	struct:ProgramHeader	access:public
panic	include/common/assert.h	/^int panic(const char *);$/;"	kind:prototype	signature:(const char *)
panic	src/lib/abort.c	/^panic(const char* msg) {$/;"	kind:function	signature:(const char* msg)
phentsize	boot/boot.h	/^	unsigned short phentsize;$/;"	kind:member	struct:ELFHeader	access:public
phnum	boot/boot.h	/^	unsigned short phnum;$/;"	kind:member	struct:ELFHeader	access:public
phoff	boot/boot.h	/^	unsigned int   phoff;$/;"	kind:member	struct:ELFHeader	access:public
pid	include/device/hal.h	/^	pid_t pid;$/;"	kind:member	struct:Device	access:public
pid	include/x86/thread.h	/^	pid_t pid;$/;"	kind:member	struct:Thread	access:public
pid_t	include/common/types.h	/^typedef unsigned int   pid_t;$/;"	kind:typedef
pos	include/device/tty.h	/^	int size, pos;$/;"	kind:member	struct:Console	access:public
present	include/x86/memory.h	/^	uint32_t present          : 1;$/;"	kind:member	struct:GateDescriptor	access:public
prev	include/common/list.h	/^	struct list_head *next, *prev;$/;"	kind:member	struct:list_head	typeref:struct:list_head::	access:public
printk	include/device/serial.h	/^int printk(const char*, ...);$/;"	kind:prototype	signature:(const char*, ...)
printk	src/device/serial.c	/^int printk (const char* format, ...) {$/;"	kind:function	signature:(const char* format, ...)
privilege_level	include/x86/memory.h	/^	uint32_t privilege_level  : 2;$/;"	kind:member	struct:GateDescriptor	access:public
putc	src/tty/console.c	/^putc(Console *c, char ch) {$/;"	kind:function	file:	signature:(Console *c, char ch)
putchar	include/device/serial.h	/^void putchar(char);$/;"	kind:prototype	signature:(char)
putchar	src/device/serial.c	/^putchar(char ch) {$/;"	kind:function	signature:(char ch)
queue	include/x86/sem.h	/^	struct list_head queue;$/;"	kind:member	struct:Semaphore	typeref:struct:Semaphore::list_head	access:public
r	include/device/tty.h	/^	int i, f, r;$/;"	kind:member	struct:Console	access:public
read_request	include/device/tty.h	/^void read_request(DevMessage *m);$/;"	kind:prototype	signature:(DevMessage *m)
read_request	src/tty/console.c	/^read_request(DevMessage *m) {$/;"	kind:function	signature:(DevMessage *m)
read_rtc	include/device/timer.h	/^int read_rtc(int);$/;"	kind:prototype	signature:(int)
read_rtc	src/device/timer.c	/^read_rtc(int reg) {$/;"	kind:function	signature:(int reg)
readkey	include/device/tty.h	/^void readkey(void);$/;"	kind:prototype	signature:(void)
readkey	src/tty/keyboard.c	/^readkey(void) {$/;"	kind:function	signature:(void)
readsect	boot/main.c	/^readsect(void *dst, int offset) {$/;"	kind:function	signature:(void *dst, int offset)
readseg	boot/main.c	/^readseg(unsigned char *pa, int count, int offset) {$/;"	kind:function	signature:(unsigned char *pa, int count, int offset)
readseg	boot/main.c	/^void readseg(unsigned char *, int, int);$/;"	kind:prototype	file:	signature:(unsigned char *, int, int)
receive	include/x86/message.h	/^int receive(pid_t, Message*);$/;"	kind:prototype	signature:(pid_t, Message*)
receive	src/proc/message.c	/^receive(pid_t dst, Message *msg) {$/;"	kind:function	signature:(pid_t dst, Message *msg)
removec	src/tty/console.c	/^removec(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
rstk	include/device/tty.h	/^	Message rstk[RSTK_SZ];$/;"	kind:member	struct:Console	access:public
rt	src/device/timer.c	/^static Time rt;$/;"	kind:variable	file:
rtop	include/device/tty.h	/^	int rtop;$/;"	kind:member	struct:Console	access:public
runq	include/x86/thread.h	/^	struct list_head runq, freeq, semq;$/;"	kind:member	struct:Thread	typeref:struct:Thread::list_head	access:public
save_idt	include/x86/cpu.h	/^save_idt(void *addr, uint32_t size) {$/;"	kind:function	signature:(void *addr, uint32_t size)
schedule	include/x86/thread.h	/^schedule(void) {$/;"	kind:function	signature:(void)
scr	include/device/tty.h	/^	uint16_t *scr;$/;"	kind:member	struct:Console	access:public
scrup	src/tty/console.c	/^scrup(Console *c) {$/;"	kind:function	file:	signature:(Console *c)
second	include/device/timer.h	/^	int hour, minute, second;$/;"	kind:member	struct:Time	access:public
segment	include/x86/memory.h	/^	uint32_t segment          : 16;$/;"	kind:member	struct:GateDescriptor	access:public
semq	include/x86/thread.h	/^	struct list_head runq, freeq, semq;$/;"	kind:member	struct:Thread	typeref:struct:Thread::	access:public
send	include/x86/message.h	/^int send(pid_t, Message*);$/;"	kind:prototype	signature:(pid_t, Message*)
send	src/proc/message.c	/^send(pid_t dst, Message *msg) {$/;"	kind:function	signature:(pid_t dst, Message *msg)
send_keymsg	src/tty/keyboard.c	/^send_keymsg(void) {$/;"	kind:function	signature:(void)
send_keymsg	src/tty/tty.c	/^void send_keymsg(void);$/;"	kind:prototype	file:	signature:(void)
send_updatemsg	src/tty/console.c	/^send_updatemsg(void) {$/;"	kind:function	file:	signature:(void)
serial_idle	src/device/serial.c	/^serial_idle(void) {$/;"	kind:function	file:	signature:(void)
set_intr	src/irq/idt.c	/^set_intr(struct GateDescriptor *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {$/;"	kind:function	file:	signature:(struct GateDescriptor *ptr, uint32_t selector, uint32_t offset, uint32_t dpl)
set_trap	src/irq/idt.c	/^set_trap(struct GateDescriptor *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {$/;"	kind:function	file:	signature:(struct GateDescriptor *ptr, uint32_t selector, uint32_t offset, uint32_t dpl)
shentsize	boot/boot.h	/^	unsigned short shentsize;$/;"	kind:member	struct:ELFHeader	access:public
shft	src/tty/keyboard.c	/^static int caps, ctrl, alt, shft;$/;"	kind:variable	file:
shnum	boot/boot.h	/^	unsigned short shnum;$/;"	kind:member	struct:ELFHeader	access:public
shoff	boot/boot.h	/^	unsigned int   shoff;$/;"	kind:member	struct:ELFHeader	access:public
shstrndx	boot/boot.h	/^	unsigned short shstrndx;$/;"	kind:member	struct:ELFHeader	access:public
size	include/device/tty.h	/^	int size, pos;$/;"	kind:member	struct:Console	access:public
size_t	include/common/types.h	/^typedef unsigned int   size_t;$/;"	kind:typedef
sleep	include/x86/thread.h	/^void sleep(void);$/;"	kind:prototype	signature:(void)
sleep	src/proc/thread.c	/^sleep(void) {$/;"	kind:function	signature:(void)
sleeping	include/x86/thread.h	/^extern Thread *current, *free, *sleeping, *next;$/;"	kind:externvar
sleeping	src/proc/thread.c	/^Thread *current, *free, *sleeping, *next;$/;"	kind:variable
src	include/x86/message.h	/^	int src;$/;"	kind:member	struct:Message	access:public
src	include/x86/message.h	/^	int src;$/;"	kind:member	struct:MsgHead	access:public
start	boot/start.S	/^start:$/;"	kind:label
start32	boot/start.S	/^start32:$/;"	kind:label
stop_thread	include/x86/thread.h	/^void stop_thread(void);$/;"	kind:prototype	signature:(void)
stop_thread	src/proc/thread.c	/^stop_thread(void) {$/;"	kind:function	signature:(void)
strcmp	include/common/string.h	/^int strcmp(const void *, const void *);$/;"	kind:prototype	signature:(const void *, const void *)
strcmp	src/lib/string.c	/^strcmp(const void *str1, const void *str2) {$/;"	kind:function	signature:(const void *str1, const void *str2)
system	include/x86/memory.h	/^	uint32_t system           : 1;$/;"	kind:member	struct:GateDescriptor	access:public
test	src/main.c	/^test() {$/;"	kind:function
test	src/main.c	/^void test(void);$/;"	kind:prototype	file:	signature:(void)
tf	include/x86/thread.h	/^	struct TrapFrame* tf;$/;"	kind:member	struct:Thread	typeref:struct:Thread::TrapFrame	access:public
thread_pool	include/x86/thread.h	/^extern Thread thread_pool[THREAD_NUM];$/;"	kind:externvar
thread_pool	src/proc/thread.c	/^Thread thread_pool[THREAD_NUM];$/;"	kind:variable
timerd	include/device/timer.h	/^void timerd(void);$/;"	kind:prototype	signature:(void)
tsc	src/tty/banner.c	/^static int tsc = 0;$/;"	kind:variable	file:
ttyd	src/tty/tty.c	/^void ttyd(void);$/;"	kind:prototype	file:	signature:(void)
ttyd	src/tty/ttyd.c	/^ttyd(void) {$/;"	kind:function	signature:(void)
ttynames	include/device/tty.h	/^extern const char *ttynames[];$/;"	kind:externvar
ttynames	src/tty/console.c	/^const char *ttynames[NR_TTY] = {"tty1", "tty2", "tty3", "tty4"};$/;"	kind:variable
ttys	include/device/tty.h	/^extern Console ttys[];$/;"	kind:externvar
ttys	src/tty/console.c	/^Console ttys[NR_TTY];$/;"	kind:variable
type	boot/boot.h	/^	unsigned int type;$/;"	kind:member	struct:ProgramHeader	access:public
type	boot/boot.h	/^	unsigned short type;$/;"	kind:member	struct:ELFHeader	access:public
type	include/x86/memory.h	/^	uint32_t type             : 4;$/;"	kind:member	struct:GateDescriptor	access:public
type	include/x86/message.h	/^	int type;$/;"	kind:member	struct:Message	access:public
type	include/x86/message.h	/^	int type;$/;"	kind:member	struct:MsgHead	access:public
uint16_t	include/common/types.h	/^typedef unsigned short uint16_t;$/;"	kind:typedef
uint32_t	include/common/types.h	/^typedef unsigned int   uint32_t;$/;"	kind:typedef
uint8_t	include/common/types.h	/^typedef unsigned char  uint8_t;$/;"	kind:typedef
unlock	include/x86/thread.h	/^unlock(void) {$/;"	kind:function	signature:(void)
update_banner	include/device/tty.h	/^void update_banner(void);$/;"	kind:prototype	signature:(void)
update_banner	src/tty/banner.c	/^void update_banner(void) {$/;"	kind:function	signature:(void)
update_jiffy	include/device/timer.h	/^void update_jiffy(void);$/;"	kind:prototype	signature:(void)
update_jiffy	src/device/timer.c	/^update_jiffy(void) {$/;"	kind:function	signature:(void)
update_sched	include/device/timer.h	/^void update_sched(void);$/;"	kind:prototype	signature:(void)
update_sched	src/device/timer.c	/^update_sched(void) {$/;"	kind:function	signature:(void)
vaddr	boot/boot.h	/^	unsigned int vaddr;$/;"	kind:member	struct:ProgramHeader	access:public
vbuf	include/device/tty.h	/^	uint16_t *vbuf;$/;"	kind:member	struct:Console	access:public
vbuf	src/tty/console.c	/^static uint16_t vbuf[NR_TTY][SCR_W * SCR_H * 2];$/;"	kind:variable	file:
vec0	src/irq/idt.c	/^void vec0();$/;"	kind:prototype	file:
vec1	src/irq/idt.c	/^void vec1();$/;"	kind:prototype	file:
vec10	src/irq/idt.c	/^void vec10();$/;"	kind:prototype	file:
vec11	src/irq/idt.c	/^void vec11();$/;"	kind:prototype	file:
vec12	src/irq/idt.c	/^void vec12();$/;"	kind:prototype	file:
vec128	src/irq/idt.c	/^void vec128();$/;"	kind:prototype	file:
vec13	src/irq/idt.c	/^void vec13();$/;"	kind:prototype	file:
vec2	src/irq/idt.c	/^void vec2();$/;"	kind:prototype	file:
vec3	src/irq/idt.c	/^void vec3();$/;"	kind:prototype	file:
vec4	src/irq/idt.c	/^void vec4();$/;"	kind:prototype	file:
vec5	src/irq/idt.c	/^void vec5();$/;"	kind:prototype	file:
vec6	src/irq/idt.c	/^void vec6();$/;"	kind:prototype	file:
vec7	src/irq/idt.c	/^void vec7();$/;"	kind:prototype	file:
vec8	src/irq/idt.c	/^void vec8();$/;"	kind:prototype	file:
vec9	src/irq/idt.c	/^void vec9();$/;"	kind:prototype	file:
version	boot/boot.h	/^	unsigned int   version;$/;"	kind:member	struct:ELFHeader	access:public
vmem	src/tty/console.c	/^static uint16_t *vmem = (void*)\/*pa_to_va*\/(0xb8000);$/;"	kind:variable	file:
w	include/device/tty.h	/^	int w, h, wh;$/;"	kind:member	struct:Console	access:public
wait_for_interrupt	include/x86/cpu.h	/^wait_for_interrupt() {$/;"	kind:function	signature:()
waitdisk	boot/main.c	/^waitdisk(void) {$/;"	kind:function	signature:(void)
wakeup	include/x86/thread.h	/^void wakeup(Thread* t);$/;"	kind:prototype	signature:(Thread* t)
wakeup	src/proc/thread.c	/^wakeup(Thread* t) {$/;"	kind:function	signature:(Thread* t)
wh	include/device/tty.h	/^	int w, h, wh;$/;"	kind:member	struct:Console	access:public
xxx	include/x86/memory.h	/^	uint32_t edi, esi, ebp, xxx, ebx, edx, ecx, eax;$/;"	kind:member	struct:TrapFrame	access:public
year	include/device/timer.h	/^	int year, month, day;$/;"	kind:member	struct:Time	access:public
